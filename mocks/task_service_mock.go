// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/services/task_service.go

// Package mock_services is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dtos "github.com/marioTiara/todolistapi/internal/app/dtos"
	models "github.com/marioTiara/todolistapi/internal/app/models"
)

// MockTaskService is a mock of TaskService interface.
type MockTaskService struct {
	ctrl     *gomock.Controller
	recorder *MockTaskServiceMockRecorder
}

// MockTaskServiceMockRecorder is the mock recorder for MockTaskService.
type MockTaskServiceMockRecorder struct {
	mock *MockTaskService
}

// NewMockTaskService creates a new mock instance.
func NewMockTaskService(ctrl *gomock.Controller) *MockTaskService {
	mock := &MockTaskService{ctrl: ctrl}
	mock.recorder = &MockTaskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskService) EXPECT() *MockTaskServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskService) Create(task dtos.AddTaskRequest) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", task)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskServiceMockRecorder) Create(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskService)(nil).Create), task)
}

// CreateSubTask mocks base method.
func (m *MockTaskService) CreateSubTask(subTask dtos.AddSubTaskRequest) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubTask", subTask)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubTask indicates an expected call of CreateSubTask.
func (mr *MockTaskServiceMockRecorder) CreateSubTask(subTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubTask", reflect.TypeOf((*MockTaskService)(nil).CreateSubTask), subTask)
}

// Delete mocks base method.
func (m *MockTaskService) Delete(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskServiceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskService)(nil).Delete), id)
}

// FilterTask mocks base method.
func (m *MockTaskService) FilterTask(title, description string, page, limit int, preload bool) ([]dtos.TaskQueryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterTask", title, description, page, limit, preload)
	ret0, _ := ret[0].([]dtos.TaskQueryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTask indicates an expected call of FilterTask.
func (mr *MockTaskServiceMockRecorder) FilterTask(title, description, page, limit, preload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTask", reflect.TypeOf((*MockTaskService)(nil).FilterTask), title, description, page, limit, preload)
}

// FindAll mocks base method.
func (m *MockTaskService) FindAll() ([]dtos.TaskQueryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].([]dtos.TaskQueryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockTaskServiceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockTaskService)(nil).FindAll))
}

// FindByID mocks base method.
func (m *MockTaskService) FindByID(ID uint, preload bool) (dtos.TaskQueryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ID, preload)
	ret0, _ := ret[0].(dtos.TaskQueryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockTaskServiceMockRecorder) FindByID(ID, preload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTaskService)(nil).FindByID), ID, preload)
}

// FindSubTaskByTaskID mocks base method.
func (m *MockTaskService) FindSubTaskByTaskID(title, description string, parentID uint, page, limit int) ([]dtos.SubtaskQueryModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSubTaskByTaskID", title, description, parentID, page, limit)
	ret0, _ := ret[0].([]dtos.SubtaskQueryModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindSubTaskByTaskID indicates an expected call of FindSubTaskByTaskID.
func (mr *MockTaskServiceMockRecorder) FindSubTaskByTaskID(title, description, parentID, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSubTaskByTaskID", reflect.TypeOf((*MockTaskService)(nil).FindSubTaskByTaskID), title, description, parentID, page, limit)
}

// Update mocks base method.
func (m *MockTaskService) Update(task dtos.UpdateTaskRequest) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", task)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTaskServiceMockRecorder) Update(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskService)(nil).Update), task)
}
