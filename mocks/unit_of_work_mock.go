// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/unit_of_work.go

// Package mock_repository is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	repository "github.com/marioTiara/todolistapi/internal/app/repository"
)

// MockUnitOfWork is a mock of UnitOfWork interface.
type MockUnitOfWork struct {
	ctrl     *gomock.Controller
	recorder *MockUnitOfWorkMockRecorder
}

// MockUnitOfWorkMockRecorder is the mock recorder for MockUnitOfWork.
type MockUnitOfWorkMockRecorder struct {
	mock *MockUnitOfWork
}

// NewMockUnitOfWork creates a new mock instance.
func NewMockUnitOfWork(ctrl *gomock.Controller) *MockUnitOfWork {
	mock := &MockUnitOfWork{ctrl: ctrl}
	mock.recorder = &MockUnitOfWorkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitOfWork) EXPECT() *MockUnitOfWorkMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockUnitOfWork) Begin() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(error)
	return ret0
}

// Begin indicates an expected call of Begin.
func (mr *MockUnitOfWorkMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockUnitOfWork)(nil).Begin))
}

// Commit mocks base method.
func (m *MockUnitOfWork) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockUnitOfWorkMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockUnitOfWork)(nil).Commit))
}

// FileRepository mocks base method.
func (m *MockUnitOfWork) FileRepository() repository.FileRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileRepository")
	ret0, _ := ret[0].(repository.FileRepository)
	return ret0
}

// FileRepository indicates an expected call of FileRepository.
func (mr *MockUnitOfWorkMockRecorder) FileRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileRepository", reflect.TypeOf((*MockUnitOfWork)(nil).FileRepository))
}

// Rollback mocks base method.
func (m *MockUnitOfWork) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockUnitOfWorkMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockUnitOfWork)(nil).Rollback))
}

// TaskRepository mocks base method.
func (m *MockUnitOfWork) TaskRepository() repository.TaskRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskRepository")
	ret0, _ := ret[0].(repository.TaskRepository)
	return ret0
}

// TaskRepository indicates an expected call of TaskRepository.
func (mr *MockUnitOfWorkMockRecorder) TaskRepository() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskRepository", reflect.TypeOf((*MockUnitOfWork)(nil).TaskRepository))
}
