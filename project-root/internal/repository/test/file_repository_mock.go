// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/file_repository.go

// Package mocks is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/marioTiara/todolistapp/internal/api/models"
)

// MockFileRepository is a mock of FileRepository interface.
type MockFileRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileRepositoryMockRecorder
}

// MockFileRepositoryMockRecorder is the mock recorder for MockFileRepository.
type MockFileRepositoryMockRecorder struct {
	mock *MockFileRepository
}

// NewMockFileRepository creates a new mock instance.
func NewMockFileRepository(ctrl *gomock.Controller) *MockFileRepository {
	mock := &MockFileRepository{ctrl: ctrl}
	mock.recorder = &MockFileRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileRepository) EXPECT() *MockFileRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFileRepository) Create(file models.Files) (models.Files, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", file)
	ret0, _ := ret[0].(models.Files)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFileRepositoryMockRecorder) Create(file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileRepository)(nil).Create), file)
}

// DeleteByID mocks base method.
func (m *MockFileRepository) DeleteByID(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByID indicates an expected call of DeleteByID.
func (mr *MockFileRepositoryMockRecorder) DeleteByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByID", reflect.TypeOf((*MockFileRepository)(nil).DeleteByID), id)
}

// DeleteByTaskID mocks base method.
func (m *MockFileRepository) DeleteByTaskID(taskID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByTaskID", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByTaskID indicates an expected call of DeleteByTaskID.
func (mr *MockFileRepositoryMockRecorder) DeleteByTaskID(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByTaskID", reflect.TypeOf((*MockFileRepository)(nil).DeleteByTaskID), taskID)
}

// GetByID mocks base method.
func (m *MockFileRepository) GetByID(id uint) (models.Files, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(models.Files)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFileRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFileRepository)(nil).GetByID), id)
}

// GetByTaskID mocks base method.
func (m *MockFileRepository) GetByTaskID(taskID uint) ([]models.Files, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByTaskID", taskID)
	ret0, _ := ret[0].([]models.Files)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByTaskID indicates an expected call of GetByTaskID.
func (mr *MockFileRepositoryMockRecorder) GetByTaskID(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByTaskID", reflect.TypeOf((*MockFileRepository)(nil).GetByTaskID), taskID)
}
